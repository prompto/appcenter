@WidgetProperties({ bsClass: Text })
native widget Breadcrumb {

    category bindings {
        JavaScript: ReactBootstrap.Breadcrumb;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ active: Boolean, href: Text, target: Text, title: Any })
native widget BreadcrumbItem {

    category bindings {
        JavaScript: ReactBootstrap.Breadcrumb.Item;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ active: Boolean, block: Boolean, bsClass: Text, bsSize: <"lg", "large", "sm", "small", "xs", "xsmall">, bsStyle: <"success", "warning", "danger", "info", "default", "primary", "link">, componentClass: <Text, Type<ReactWidget>>, disabled: Boolean, href: Text, onClick: ClickEventCallback, type: <"button", "reset", "submit"> })
native widget Button {

    category bindings {
        JavaScript: ReactBootstrap.Button;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, disabled: Boolean, inline: Boolean, inputRef: WidgetCallback, title: Text, validationState: <"success", "warning", "error", null> })
native widget Checkbox {

    category bindings {
        JavaScript: ReactBootstrap.Checkbox;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, disabled: Boolean, inline: Boolean, inputRef: WidgetCallback, title: Text, validationState: <"success", "warning", "error", null> })
native widget Radio {

    category bindings {
        JavaScript: ReactBootstrap.Radio;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, bsSize: <"lg", "large", "sm", "small"> })
native widget InputGroup {

    category bindings {
        JavaScript: ReactBootstrap.InputGroup;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text })
native widget InputGroupAddon {

    category bindings {
        JavaScript: ReactBootstrap.InputGroup.Addon;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text })
native widget InputGroupButton {

    category bindings {
        JavaScript: ReactBootstrap.InputGroup.Button;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, componentClass: <Text, Type<ReactWidget>>, horizontal: Boolean, inline: Boolean })
native widget Form {

    category bindings {
        JavaScript: ReactBootstrap.Form;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, bsSize: <"lg", "large", "sm", "small">, controlId: Text, validationState: <"success", "warning", "error", null> })
native widget FormGroup {

    category bindings {
        JavaScript: ReactBootstrap.FormGroup;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, bsSize: <"sm", "small", "lg", "large">, componentClass: <Text, Type<ReactWidget>>, id: Text, inputRef: WidgetCallback, onChange: InputChangedEventCallback, type: Text })
native widget FormControl {

    category bindings {
        JavaScript: ReactBootstrap.FormControl;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, htmlFor: Text, srOnly: Boolean })
native widget ControlLabel {

    category bindings {
        JavaScript: ReactBootstrap.ControlLabel;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text })
native widget HelpBlock {

    category bindings {
        JavaScript: ReactBootstrap.HelpBlock;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bordered: Boolean, bsClass: Text, condensed: Boolean, hover: Boolean, responsive: Boolean, striped: Boolean })
native widget Table {

    category bindings {
        JavaScript: ReactBootstrap.Table;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ animation: Boolean, autoFocus: Boolean, backdrop: <"static", true, false>, backdropClassName: Text, backdropStyle: Any, backdropTransition: Text, bsClass: Text, bsSize: <"lg", "large", "sm", "small">, container: Any, containerClassName: Text, dialogClassName: Text, dialogComponentClass: Text, enforceFocus: Boolean, keyboard: Boolean, manager: Any, onBackdropClick: Callback, onEnter: Callback, onEntered: Callback, onEntering: Callback, onEscapeKeyDown: Callback, onEscapeKeyUp: Callback, onExit: Callback, onExited: Callback, onExiting: Callback, onHide: Callback, onRendered: Callback, onShow: Callback, renderBackdrop: Callback, restoreFocus: Boolean, show: Boolean, transition: Text })
native widget Modal {

    category bindings {
        JavaScript: ReactBootstrap.Modal;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, bsSize: <"lg", "large", "sm", "small">, dialogClassName: Text })
native widget ModalDialog {

    category bindings {
        JavaScript: ReactBootstrap.Modal.Dialog;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, closeButton: Boolean, closeLabel: Text, onHide: Callback })
native widget ModalHeader {

    category bindings {
        JavaScript: ReactBootstrap.Modal.Header;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, componentClass: <Text, Type<ReactWidget>> })
native widget ModalFooter {

    category bindings {
        JavaScript: ReactBootstrap.Modal.Footer;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, componentClass: <Text, Type<ReactWidget>> })
native widget ModalBody {

    category bindings {
        JavaScript: ReactBootstrap.Modal.Body;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, componentClass: <Text, Type<ReactWidget>> })
native widget ModalTitle {

    category bindings {
        JavaScript: ReactBootstrap.Modal.Title;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, bsStyle: <"success", "warning", "danger", "info", "default", "primary">, eventKey: Any, expanded: Boolean, id: Text, onSelect: ItemSelectedCallback, onToggle: ToggleChangedCallback })
native widget Panel {

    category bindings {
        JavaScript: ReactBootstrap.Panel;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, onEnter: Callback, onEntered: Callback, onEntering: Callback, onExit: Callback, onExited: Callback, onExiting: Callback })
native widget PanelCollapse {

    category bindings {
        JavaScript: ReactBootstrap.Panel.Collapse;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ componentClass: <Text, Type<ReactWidget>>, onClick: ClickEventCallback })
native widget PanelToggle {

    category bindings {
        JavaScript: ReactBootstrap.Panel.Toggle;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, componentClass: <Text, Type<ReactWidget>>, toggle: Boolean })
native widget PanelTitle {

    category bindings {
        JavaScript: ReactBootstrap.Panel.Title;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, componentClass: <Text, Type<ReactWidget>> })
native widget PanelHeading {

    category bindings {
        JavaScript: ReactBootstrap.Panel.Heading;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, collapsible: Boolean })
native widget PanelBody {

    category bindings {
        JavaScript: ReactBootstrap.Panel.Body;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text })
native widget PanelFooter {

    category bindings {
        JavaScript: ReactBootstrap.Panel.Footer;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ accordion: Boolean, activeKey: Any, bsClass: Text, generateChildId: Callback, id: Text, onSelect: ItemSelectedCallback, role: Text })
native widget PanelGroup {

    category bindings {
        JavaScript: ReactBootstrap.PanelGroup;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ active: Boolean, bsClass: Text, bsStyle: <"success", "warning", "danger", "info">, children: Html[], isChild: Boolean, label: Any, max: Integer, min: Integer, now: Integer, srOnly: Boolean, striped: Boolean })
native widget ProgressBar {

    category bindings {
        JavaScript: ReactBootstrap.ProgressBar;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, collapseOnSelect: Boolean, componentClass: <Text, Type<ReactWidget>>, expanded: Boolean, fixedBottom: Boolean, fixedTop: Boolean, fluid: Boolean, inverse: Boolean, onSelect: ItemSelectedCallback, onToggle: ToggleChangedCallback, role: Text, staticTop: Boolean })
native widget Navbar {

    category bindings {
        JavaScript: ReactBootstrap.Navbar;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

native widget NavbarBrand {

    category bindings {
        JavaScript: ReactBootstrap.Navbar.Brand;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

native widget NavbarHeader {

    category bindings {
        JavaScript: ReactBootstrap.Navbar.Header;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ componentClass: <Text, Type<ReactWidget>>, pullLeft: Boolean, pullRight: Boolean })
native widget NavbarText {

    category bindings {
        JavaScript: ReactBootstrap.Navbar.Text;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ children: Html[], onClick: ClickEventCallback })
native widget NavbarToggle {

    category bindings {
        JavaScript: ReactBootstrap.Navbar.Toggle;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

native widget NavbarCollapse {

    category bindings {
        JavaScript: ReactBootstrap.Navbar.Collapse;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ activeHref: Text, activeKey: Any, bsClass: Text, bsStyle: <"tabs", "pills">, justified: Boolean, navbar: Boolean, onSelect: ItemSelectedCallback, pullLeft: Boolean, pullRight: Boolean, role: Text, stacked: Boolean })
native widget Nav {

    category bindings {
        JavaScript: ReactBootstrap.Nav;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ active: Boolean, activeHref: Text, activeKey: Any, bsClass: Text, children: Html[], componentClass: <Text, Type<ReactWidget>>, defaultOpen: Boolean, disabled: Boolean, dropup: Boolean, id: Text, innerRef: WidgetCallback, noCaret: Boolean, onMouseEnter: MouseEventCallback, onMouseLeave: MouseEventCallback, onSelect: ItemSelectedCallback, onToggle: Callback, open: Boolean, pullRight: Boolean, role: Text, rootCloseEvent: <"click", "mousedown">, title: { type: Any, required: true } })
native widget NavDropdown {

    category bindings {
        JavaScript: ReactBootstrap.NavDropdown;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ active: Boolean, disabled: Boolean, eventKey: Any, href: Text, onClick: ClickEventCallback, onSelect: ItemSelectedCallback, role: Text })
native widget NavItem {

    category bindings {
        JavaScript: ReactBootstrap.NavItem;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ componentClass: <Text, Type<ReactWidget>>, pullLeft: Boolean, pullRight: Boolean })
native widget NavbarForm {

    category bindings {
        JavaScript: ReactBootstrap.Navbar.Form;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ activeKey: Any, animation: <Boolean, Text>, bsClass: Text, bsStyle: <"tabs", "pills">, id: Text, mountOnEnter: Boolean, onSelect: ItemSelectedCallback, unmountOnExit: Boolean })
native widget Tabs {

    category bindings {
        JavaScript: ReactBootstrap.Tabs;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ animation: <Boolean, Text>, "aria-labelledby": Text, bsClass: Text, disabled: Boolean, eventKey: Any, id: Text, mountOnEnter: Boolean, onEnter: Callback, onEntered: Callback, onEntering: Callback, onExit: Callback, onExited: Callback, onExiting: Callback, tabClassName: Text, title: Any, unmountOnExit: Boolean })
native widget Tab {

    category bindings {
        JavaScript: ReactBootstrap.Tab;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, children: Html[], componentClass: <Text, Type<ReactWidget>>, defaultOpen: Boolean, disabled: Boolean, dropup: Boolean, id: Text, onMouseEnter: MouseEventCallback, onMouseLeave: MouseEventCallback, onSelect: ItemSelectedCallback, onToggle: AnyCallback, open: Boolean, pullRight: Boolean, role: Text, rootCloseEvent: <"click", "mousedown"> })
native widget Dropdown {

    category bindings {
        JavaScript: ReactBootstrap.Dropdown;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, noCaret: Boolean, open: Boolean, title: Text, useAnchor: Boolean })
native widget DropdownToggle {

    category bindings {
        JavaScript: ReactBootstrap.Dropdown.Toggle;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, labelledBy: <Text, Integer>, onClose: Callback, onSelect: ItemSelectedCallback, open: Boolean, pullRight: Boolean, rootCloseEvent: <"click", "mousedown"> })
native widget DropdownMenu {

    category bindings {
        JavaScript: ReactBootstrap.Dropdown.Menu;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, bsSize: Text, bsStyle: Text, children: Html[], componentClass: <Text, Type<ReactWidget>>, defaultOpen: Boolean, disabled: Boolean, dropup: Boolean, id: Text, innerRef: WidgetCallback, noCaret: Boolean, onMouseEnter: MouseEventCallback, onMouseLeave: MouseEventCallback, onSelect: ItemSelectedCallback, onToggle: Callback, open: Boolean, pullRight: Boolean, role: Text, rootCloseEvent: <"click", "mousedown">, title: { type: Any, required: true } })
native widget DropdownButton {

    category bindings {
        JavaScript: ReactBootstrap.DropdownButton;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsSize: Text, bsStyle: Text, children: Html[], defaultOpen: Boolean, href: Text, innerRef: WidgetCallback, onClick: ClickEventCallback, open: Boolean, title: { type: Any, required: true }, toggleLabel: Text })
native widget SplitButton {

    category bindings {
        JavaScript: ReactBootstrap.SplitButton;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

native widget ContextMenu {

    category bindings {
        JavaScript: ReactBootstrap.ContextMenu;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ active: Boolean, bsClass: Text, disabled: Boolean, divider: Boolean, eventKey: Any, header: Boolean, href: Text, onClick: ClickEventCallback, onSelect: ItemSelectedCallback })
native widget MenuItem {

    category bindings {
        JavaScript: ReactBootstrap.MenuItem;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, componentClass: <Text, Type<ReactWidget>>, fluid: Boolean })
native widget Grid {

    category bindings {
        JavaScript: ReactBootstrap.Grid;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, componentClass: <Text, Type<ReactWidget>> })
native widget Row {

    category bindings {
        JavaScript: ReactBootstrap.Row;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, componentClass: <Text, Type<ReactWidget>>, lg: Integer, lgHidden: Boolean, lgOffset: Integer, lgPull: Integer, lgPush: Integer, md: Integer, mdHidden: Boolean, mdOffset: Integer, mdPull: Integer, mdPush: Integer, sm: Integer, smHidden: Boolean, smOffset: Integer, smPull: Integer, smPush: Integer, xs: Integer, xsHidden: Boolean, xsOffset: Integer, xsPull: Integer, xsPush: Integer })
native widget Col {

    category bindings {
        JavaScript: ReactBootstrap.Col;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, componentClass: <Text, Type<ReactWidget>>, visibleLgBlock: Boolean, visibleMdBlock: Boolean, visibleSmBlock: Boolean, visibleXsBlock: Boolean })
native widget Clearfix {

    category bindings {
        JavaScript: ReactBootstrap.Clearfix;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, glyph: { type: Text, required: true } })
native widget Glyphicon {

    category bindings {
        JavaScript: ReactBootstrap.Glyphicon;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ alt: Text, bsClass: Text, href: Text, onError: Callback, onLoad: Callback, src: Text })
native widget Thumbnail {

    category bindings {
        JavaScript: ReactBootstrap.Thumbnail;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text })
native widget PageHeader {

    category bindings {
        JavaScript: ReactBootstrap.PageHeader;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text })
native widget ButtonToolbar {

    category bindings {
        JavaScript: ReactBootstrap.ButtonToolbar;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ block: Boolean, bsClass: Text, justified: Boolean, vertical: Boolean })
native widget ButtonGroup {

    category bindings {
        JavaScript: ReactBootstrap.ButtonGroup;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ name: Text, onChange: AnyCallback, type: <"checkbox", "radio">, value: Any })
native widget ToggleButtonGroup {

    category bindings {
        JavaScript: ReactBootstrap.ToggleButtonGroup;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ checked: Boolean, disabled: Boolean, name: Text, onChange: AnyCallback, type: <"checkbox", "radio">, value: Any })
native widget ToggleButton {

    category bindings {
        JavaScript: ReactBootstrap.ToggleButton;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, bsSize: <"lg", "large", "sm", "small"> })
native widget Well {

    category bindings {
        JavaScript: ReactBootstrap.Well;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, onSelect: ItemSelectedCallback })
native widget Pagination {

    category bindings {
        JavaScript: ReactBootstrap.Pagination;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ active: Boolean, activeLabel: Text, className: Text, disabled: Boolean, eventKey: Any, onSelect: ItemSelectedCallback })
native widget PaginationItem {

    category bindings {
        JavaScript: ReactBootstrap.Pagination.Item;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ disabled: Boolean })
native widget PaginationFirst {

    category bindings {
        JavaScript: ReactBootstrap.Pagination.First;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ disabled: Boolean })
native widget PaginationLast {

    category bindings {
        JavaScript: ReactBootstrap.Pagination.Last;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ disabled: Boolean })
native widget PaginationNext {

    category bindings {
        JavaScript: ReactBootstrap.Pagination.Next;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ disabled: Boolean })
native widget PaginationPrev {

    category bindings {
        JavaScript: ReactBootstrap.Pagination.Prev;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ disabled: Boolean })
native widget PaginationEllipsis {

    category bindings {
        JavaScript: ReactBootstrap.Pagination.Ellipsis;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, onSelect: ItemSelectedCallback })
native widget Pager {

    category bindings {
        JavaScript: ReactBootstrap.Pager;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ disabled: Boolean, eventKey: Any, next: Boolean, onClick: ClickEventCallback, onSelect: ItemSelectedCallback, previous: Boolean })
native widget PagerItem {

    category bindings {
        JavaScript: ReactBootstrap.Pager.Item;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ align: <"justify", "left", "right">, allowNew: <Boolean, Callback>, "aria-label": Text, autoFocus: Boolean, bsSize: <"large", "lg", "sm", "small">, caseSensitive: Boolean, clearButton: Boolean, defaultInputValue: Text, defaultOpen: Boolean, defaultSelected: <Any[], Text[]>, dropup: Boolean, emptyLabel: Any, filterBy: <Text[], Callback>, flip: Boolean, highlightOnlyResult: Boolean, id: Text, ignoreDiacritics: Boolean, inputProps: Document, isInvalid: Boolean, isLoading: Boolean, isMenuShown: Boolean, isValid: Boolean, labelKey: <Text, TypeaheadLabelCallback>, maxHeight: Text, maxResults: Integer, minLength: Integer, multiple: Boolean, newSelectionPrefix: Any, onBlur: Callback, onChange: TypeaheadSelectionChangedCallback, onFocus: Callback, onInputChange: Callback, onKeyDown: KeyboardEventCallback, onMenuToggle: Callback, onPaginate: Callback, open: Boolean, options: { types: <Any[], Text[]>, required: true }, paginate: Boolean, paginationText: Any, positionFixed: Boolean, referenceElement: Any, renderInput: Callback, renderMenu: Callback, renderMenuItemChildren: Callback, renderToken: Callback, selectHintOnEnter: Boolean, selected: <Text[], Any[]>, size: <"large", "lg", "sm", "small"> })
native widget Typeahead {

    category bindings {
        JavaScript: ReactBootstrap.Typeahead;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ autoComplete: Text, autoFocus: Boolean, bsClass: Text, bsSize: Text, calendarContainer: Any, calendarPlacement: <Text, Callback>, cellPadding: Text, children: Html[], className: Text, clearButtonElement: <Text, Any>, customControl: Any, dateFormat: Text, dayLabels: Text[], defaultValue: Date, disabled: Boolean, id: Text, instanceCount: Integer, maxDate: Date, minDate: Date, monthLabels: Text[], name: Text, nextButtonElement: <Text, Any>, noValidate: Boolean, onBlur: Callback, onChange: DateChangedCallback, onClear: Callback, onFocus: Callback, onInvalid: Callback, placeholder: Text, previousButtonElement: <Text, Any>, required: Boolean, roundedCorners: Boolean, showClearButton: Boolean, showTodayButton: Boolean, showWeeks: Boolean, style: Any, todayButtonLabel: Text, value: Date, weekStartsOn: Integer })
native widget DatePicker {

    category bindings {
        JavaScript: ReactBootstrap.DatePicker;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ activeIndex: Integer, bsClass: Text, controls: Boolean, defaultActiveIndex: Integer, direction: <"prev", "next">, indicators: Boolean, interval: Integer, nextIcon: Any, nextLabel: Text, onSelect: ItemSelectedCallback, onSlideEnd: Callback, pauseOnHover: Boolean, prevIcon: Any, prevLabel: Text, slide: Boolean, wrap: Boolean })
native widget Carousel {

    category bindings {
        JavaScript: ReactBootstrap.Carousel;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ active: Boolean, animateIn: Boolean, animateOut: Boolean, direction: <"prev", "next">, index: Integer, onAnimateOutEnd: Callback })
native widget CarouselItem {

    category bindings {
        JavaScript: ReactBootstrap.Carousel.Item;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, componentClass: <Text, Type<ReactWidget>> })
native widget CarouselCaption {

    category bindings {
        JavaScript: ReactBootstrap.Carousel.Caption;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, pullRight: Boolean })
native widget Badge {

    category bindings {
        JavaScript: ReactBootstrap.Badge;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, bsStyle: <"success", "warning", "danger", "info", "default", "primary"> })
native widget Label {

    category bindings {
        JavaScript: ReactBootstrap.Label;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ animation: <Boolean, Text>, container: <Text, Callback>, containerPadding: Integer, onEnter: Callback, onEntered: Callback, onEntering: Callback, onExit: Callback, onExited: Callback, onExiting: Callback, onHide: Callback, onRendered: Callback, placement: <"top", "right", "bottom", "left">, rootClose: Boolean, rootCloseEvent: <"click", "mousedown">, shouldUpdatePosition: Boolean, show: Boolean, target: <Text, Callback>, transition: Text })
native widget Overlay {

    category bindings {
        JavaScript: ReactBootstrap.Overlay;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ appear: Boolean, dimension: <<"height", "width">, Callback>, getDimensionValue: Callback, in: Boolean, mountOnEnter: Boolean, onEnter: Callback, onEntered: Callback, onEntering: Callback, onExit: Callback, onExited: Callback, onExiting: Callback, role: Text, timeout: Integer, unmountOnExit: Boolean })
native widget Collapse {

    category bindings {
        JavaScript: ReactBootstrap.Collapse;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ bsClass: Text, componentClass: <Text, Type<ReactWidget>> })
native widget ListGroup {

    category bindings {
        JavaScript: ReactBootstrap.ListGroup;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ active: Any, bsClass: Text, bsStyle: <"success", "warning", "danger", "info">, disabled: Any, header: Any, href: Text, listItem: Boolean, onClick: ClickEventCallback, type: Text })
native widget ListGroupItem {

    category bindings {
        JavaScript: ReactBootstrap.ListGroupItem;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ animation: <Boolean, Text>, container: <Text, Callback>, containerPadding: Integer, defaultOverlayShown: Boolean, delay: Integer, delayHide: Integer, delayShow: Integer, onBlur: Callback, onClick: ClickEventCallback, onEnter: Callback, onEntered: Callback, onEntering: Callback, onExit: Callback, onExited: Callback, onExiting: Callback, onFocus: Callback, onHide: Callback, onMouseOut: MouseEventCallback, onMouseOver: MouseEventCallback, onRendered: Callback, overlay: { type: Any, required: true }, placement: <"top", "right", "bottom", "left">, rootClose: Boolean, rootCloseEvent: <"click", "mousedown">, shouldUpdatePosition: Boolean, transition: Text, trigger: Any })
native widget OverlayTrigger {

    category bindings {
        JavaScript: ReactBootstrap.OverlayTrigger;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

@WidgetProperties({ arrowOffsetLeft: <Integer, Text>, arrowOffsetTop: <Integer, Text>, bsClass: Text, id: Text, placement: <"top", "right", "bottom", "left">, positionLeft: <Integer, Text>, positionTop: <Integer, Text> })
native widget Tooltip {

    category bindings {
        JavaScript: ReactBootstrap.Tooltip;
    }
    
    Html method render () {
        JavaScript: return this.render();
    }

}

native method clearTypeahead (Any typeahead) {
    JavaScript: typeahead.clear();
}

abstract Text method TypeaheadLabelCallback(Any value);

abstract method TypeaheadSelectionChangedCallback(Any[] values);
